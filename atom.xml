<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Caesar Bao&#39;s blogs</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-05T16:00:30.466Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Caesar Bao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 使用VS Code 通过cmake 配置 opencv和pytorch c++ API</title>
    <link href="http://yoursite.com/post/1610d76a.html"/>
    <id>http://yoursite.com/post/1610d76a.html</id>
    <published>2019-03-05T15:16:11.000Z</published>
    <updated>2019-03-05T16:00:30.466Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情"><a href="#前情" class="headerlink" title="前情"></a>前情</h2><p>由于pytorch的1.0正式版发布不久，同时较为稳定的c++的API也是在正式版中提供支持，网上的教程不多，因此可供参考的资料只有官方文档和零零散散的博客。不过由于Mac和Linux本身相差不大，一些Linux的配置教程同样值得参考。<br>以下给出链接：<br><blockquote><footer><strong>官方文档</strong><cite><a href="https://pytorch.org/cppdocs/installing.html" target="_blank" rel="noopener">https://pytorch.org/cppdocs/installing.html</a></cite></footer></blockquote><br>Oldpan的个人博客（特别感谢Oldpan老哥的帖子给我的巨大帮助）：<br><blockquote><footer><strong>利用Pytorch的C++前端(libtorch)读取预训练权重并进行预测：</strong><cite><a href="https://oldpan.me/archives/pytorch-c-libtorch-inference" target="_blank" rel="noopener">https://oldpan.me/archives/pytorch-c-libtorch-inference</a></cite></footer></blockquote><br><blockquote><footer><strong>Pytorch源码编译简明指南：</strong><cite><a href="https://m.oldpan.me/archives/pytorch-build-simple-instruction" target="_blank" rel="noopener">https://m.oldpan.me/archives/pytorch-build-simple-instruction</a></cite></footer></blockquote></p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>所需安装的工具有：<br>1.VS Code：这个官网下载即可<br>2.OpenCV 4.0.1:终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install opencv</span><br></pre></td></tr></table></figure><br>即可安装<br>3.Pytorch1.0:可参考上面给出的Pytorch源码编译简明指南，首先在终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/pytorch/pytorch</span><br></pre></td></tr></table></figure><br>获取最新源码，然后通过编译得到Mac可以读取的.dylib文件（注意：在官方文档中下载的libtorch-shared-with-deps-latest.zip文件解压后所得到的文件夹里的动态库文件是以.so结尾，是Linux下的动态库文件，Mac识别不了）编译时应该先进入到刚刚下载好的Pytorch文件夹（默认的路径应该是/Users/用户名/pytorch）下，然后终端执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">python ../tools/build_libtorch.py</span><br></pre></td></tr></table></figure><br>进行libtorch（即c++ API）的编译，时间较长。<br>4.编译好之后打开VS Code新建一个工程，在这里我引用Oldpan老哥的例子</p><img src="/post/1610d76a/1.png"><p>工程名叫simnet，然后在simnet文件夹下新建一个CMakeLists.txt和一个test.cpp（build先不建），CMakeLists.txt中的代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.12 FATAL_ERROR)</span><br><span class="line">project(simnet)</span><br><span class="line"></span><br><span class="line">find_package(Torch REQUIRED)        # 查找libtorch</span><br><span class="line">find_package(OpenCV REQUIRED)       # 查找OpenCV</span><br><span class="line"></span><br><span class="line">if(NOT Torch_FOUND)</span><br><span class="line">message(FATAL_ERROR &quot;Pytorch Not Found!&quot;)</span><br><span class="line">endif(NOT Torch_FOUND)</span><br><span class="line"></span><br><span class="line">message(STATUS &quot;Pytorch status:&quot;)</span><br><span class="line">message(STATUS &quot;    libraries: $&#123;TORCH_LIBRARIES&#125;&quot;)</span><br><span class="line"></span><br><span class="line">message(STATUS &quot;OpenCV library status:&quot;)</span><br><span class="line">message(STATUS &quot;    version: $&#123;OpenCV_VERSION&#125;&quot;)</span><br><span class="line">message(STATUS &quot;    libraries: $&#123;OpenCV_LIBS&#125;&quot;)</span><br><span class="line">message(STATUS &quot;    include path: $&#123;OpenCV_INCLUDE_DIRS&#125;&quot;)</span><br><span class="line"></span><br><span class="line">add_executable(simnet test.cpp)</span><br><span class="line">target_link_libraries(simnet $&#123;TORCH_LIBRARIES&#125; $&#123;OpenCV_LIBS&#125;) </span><br><span class="line">set_property(TARGET simnet PROPERTY CXX_STANDARD 11)</span><br></pre></td></tr></table></figure></p><p>test.cpp中的代码为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;opencv2/opencv.hpp&gt;</span><br><span class="line">#include &quot;torch/script.h&quot;</span><br><span class="line">#include &quot;torch/torch.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;memory&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">// resize并保持图像比例不变</span><br><span class="line">cv::Mat resize_with_ratio(cv::Mat&amp; img)   </span><br><span class="line">&#123;</span><br><span class="line">cv::Mat temImage;</span><br><span class="line">int w = img.cols;</span><br><span class="line">int h = img.rows;</span><br><span class="line"></span><br><span class="line">float t = 1.;</span><br><span class="line">float len = t * std::max(w, h);</span><br><span class="line">int dst_w = 224, dst_h = 224;</span><br><span class="line">cv::Mat image = cv::Mat(cv::Size(dst_w, dst_h), CV_8UC3, cv::Scalar(128,128,128));</span><br><span class="line">cv::Mat imageROI;</span><br><span class="line">if(len==w)</span><br><span class="line">&#123;</span><br><span class="line">float ratio = (float)h/(float)w;</span><br><span class="line">cv::resize(img,temImage,cv::Size(224,224*ratio),0,0,cv::INTER_LINEAR);</span><br><span class="line">imageROI = image(cv::Rect(0, ((dst_h-224*ratio)/2), temImage.cols, temImage.rows));</span><br><span class="line">temImage.copyTo(imageROI);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">float ratio = (float)w/(float)h;</span><br><span class="line">cv::resize(img,temImage,cv::Size(224*ratio,224),0,0,cv::INTER_LINEAR);</span><br><span class="line">imageROI = image(cv::Rect(((dst_w-224*ratio)/2), 0, temImage.cols, temImage.rows));</span><br><span class="line">temImage.copyTo(imageROI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return image;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, const char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">if (argc != 2) &#123;</span><br><span class="line">std::cerr &lt;&lt; &quot;usage: example-app &lt;path-to-exported-script-module&gt;\n&quot;;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cv::VideoCapture stream(0);</span><br><span class="line">cv::namedWindow(&quot;Gesture Detect&quot;, cv::WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line">std::shared_ptr&lt;torch::jit::script::Module&gt; module = torch::jit::load(argv[1]);</span><br><span class="line">module-&gt;to(at::kCUDA);</span><br><span class="line"></span><br><span class="line">cv::Mat frame;</span><br><span class="line">cv::Mat image;</span><br><span class="line">cv::Mat input;</span><br><span class="line"></span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">stream&gt;&gt;frame;</span><br><span class="line">image = resize_with_ratio(frame);</span><br><span class="line"></span><br><span class="line">imshow(&quot;resized image&quot;,image);    //显示摄像头的数据</span><br><span class="line">cv::cvtColor(image, input, cv::COLOR_BGR2RGB);</span><br><span class="line"></span><br><span class="line">// 下方的代码即将图像转化为Tensor，随后导入模型进行预测</span><br><span class="line">torch::Tensor tensor_image = torch::from_blob(input.data, &#123;1,input.rows, input.cols,3&#125;, torch::kByte);</span><br><span class="line">tensor_image = tensor_image.permute(&#123;0,3,1,2&#125;);</span><br><span class="line">tensor_image = tensor_image.toType(torch::kFloat);</span><br><span class="line">tensor_image = tensor_image.div(255);</span><br><span class="line">tensor_image = tensor_image.to(torch::kCUDA);</span><br><span class="line">torch::Tensor result = module-&gt;forward(&#123;tensor_image&#125;).toTensor();</span><br><span class="line"></span><br><span class="line">auto max_result = result.max(1, true);</span><br><span class="line">auto max_index = std::get&lt;1&gt;(max_result).item&lt;float&gt;();</span><br><span class="line">if(max_index == 0)</span><br><span class="line">cv::putText(frame, &quot;paper&quot;, &#123;40, 50&#125;, cv::FONT_HERSHEY_PLAIN, 2.0, cv::Scalar(0, 255, 0), 2);</span><br><span class="line">else if(max_index == 1)</span><br><span class="line">cv::putText(frame, &quot;scissors&quot;, &#123;40, 50&#125;, cv::FONT_HERSHEY_PLAIN, 2.0, cv::Scalar(0, 255, 0), 2);</span><br><span class="line">else</span><br><span class="line">cv::putText(frame, &quot;stone&quot;, &#123;40, 50&#125;, cv::FONT_HERSHEY_PLAIN, 2.0, cv::Scalar(0, 255, 0), 2);</span><br><span class="line"></span><br><span class="line">imshow(&quot;Gesture Detect&quot;,frame);    //显示摄像头的数据</span><br><span class="line">cv::waitKey(30);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>保存。</p><p>5.终端cd进入simnet工程文件夹，然后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_PREFIX_PATH=/absolute/path/to/pytorch ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure><br>其中/absolute/path/to/pytorch是pytorch文件夹的绝对路径，一般是/Users/用户名/pytorch<br>这样就编译完成了<br>可以执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./simnet</span><br></pre></td></tr></table></figure><br>来运行你的工程了！</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>由于这是我第一次写教程，很多地方可能有所疏漏，并且配置的过程中踩了无数的坑，可能很多地方起了效果但是我根本没有注意到，还有前期的一些准备工作我也没有提及（比如说anaconda的安装，pip、conda、brew的安装和更新），这些网上有很多大佬写的非常详尽的教程，大家可以多多参考，我这里只是提供了一个自己的思路，如果没有安装成功还望见谅！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前情&quot;&gt;&lt;a href=&quot;#前情&quot; class=&quot;headerlink&quot; title=&quot;前情&quot;&gt;&lt;/a&gt;前情&lt;/h2&gt;&lt;p&gt;由于pytorch的1.0正式版发布不久，同时较为稳定的c++的API也是在正式版中提供支持，网上的教程不多，因此可供参考的资料只有官方文档和零零散散的博客。不过由于Mac和Linux本身相差不大，一些Linux的配置教程同样值得参考。&lt;br&gt;以下给出链接：&lt;br&gt;&lt;blockquote&gt;&lt;footer&gt;&lt;strong&gt;官方文档&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://pytorch.org/cppdocs/installing.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pytorch.org/cppdocs/installing.html&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;br&gt;Oldpan的个人博客（特别感谢Oldpan老哥的帖子给我的巨大帮助）：&lt;br&gt;&lt;blockquote&gt;&lt;footer&gt;&lt;strong&gt;利用Pytorch的C++前端(libtorch)读取预训练权重并进行预测：&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://oldpan.me/archives/pytorch-c-libtorch-inference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://oldpan.me/archives/pytorch-c-libtorch-inference&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;&lt;footer&gt;&lt;strong&gt;Pytorch源码编译简明指南：&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;https://m.oldpan.me/archives/pytorch-build-simple-instruction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://m.oldpan.me/archives/pytorch-build-simple-instruction&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Deep Learning" scheme="http://yoursite.com/categories/Deep-Learning/"/>
    
    
  </entry>
  
  <entry>
    <title>《La La Land》：有关闪耀而易碎的、遗憾而完美的那些事</title>
    <link href="http://yoursite.com/post/undefined.html"/>
    <id>http://yoursite.com/post/undefined.html</id>
    <published>2019-01-21T10:41:25.000Z</published>
    <updated>2019-01-21T15:11:33.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="City-of-stars-are-you-shining-for-me"><a href="#City-of-stars-are-you-shining-for-me" class="headerlink" title="City of stars, are you shining for me?"></a>City of stars, are you shining for me?</h1><img src="/post/undefined/1.jpg"><a id="more"></a><p>LA，los angeles，city of stars，确实太过闪耀，有太多人，哪怕从未踏上洛杉矶的土地，也对那里根种了太多美好的幻想。我想起几年前我拿着我新买的PS4，打开《GTA V》的时候，我的天！主角Michael的家外边就是粼粼的海面和充满“热情”的沙滩，无云而湛蓝的天际延伸至远处渐渐变淡，与海面交融直至分不清楚。坐上红色跑车，手搭在车窗上，沿着海岸线一路向北，深红色的岩石蒸腾着热气，视线延伸向上看见绿色————是棕榈树————阳光刺眼，模模糊糊，看不真切；渐入钢铁丛林，阳光也是热辣的吓人，大片大片的反光，大片大片的明媚，西装革履的男人，潮流青年，穿休闲服遛狗的人，酒鬼，或昂首挺胸，或散散漫漫，或失魂落魄，穿梭在层层叠叠的阴影和光斑之间，完美融进这这城市里，一如他们迥然的处境和各不相同的命运。也许是Rockstar太过顶级的美工，又有可能是他们早年的作品圣安第列斯已经满足了我的杀戮欲望，现在我规规矩矩地在马路上开着我的车，老老实实的等着红灯熄灭，绿灯闪烁，循规蹈矩的和其他市民一般驾驶。再往上开，房子渐渐的又变矮了，地势升高，一块巨大的标牌从山顶慢慢向我挪来。我慢慢驶近，在不经意间，它突然变得明亮起来。</p><p>啊，HOLLY WOOD。</p><p>闪亮的灯牌提醒我天色已晚。我下了车，站在富人区的山顶上，眺望着整个圣洛都。细小闪耀的灯光如同沙粒，连着川流不息的车流，成了江成了河，向我诉说这座钢之巨人自他从这片泥土地里诞生起便永不入睡。是啊，它是如此勤奋地活着，连同它身体里的人们，仿佛都是永不入睡的，为了梦想，为了家庭，为了生活，抑或是吸了毒嗨了药，who cares？圣洛都的天空，是我见过的最美的天空————渐变色的，难以形容————或者可以想象一下，你现在正在一个晚宴上，和你心仪的人交谈，总有那么一两个时候你会觉得羞涩，心里有头小鹿撞来撞去，眼神不知道该往哪里看；于是你只好低头盯着你手里拿着的酒杯，因为这样显得你优雅而有礼貌，你开始端详葡萄酒的颜色：深红的葡萄酒被晚宴上昏暗的光线一打，自底向上由浅入深，不断的变换着色彩，可能是浅粉色，可能是淡蓝色，可能是深紫色；你挪动酒杯，颜色也跟着变化————是了，这就是LA的夜空，不仅仅是渐变的，柔和的，绚丽的，同时，它也是暧昧的，易碎的，不可告人的。</p><p>后来我打通了游戏，我最后一次看着Michael，Franklin，Trevor站在一起，看着车子渐渐沉进海底，三个人各自说着像总结一样的话，仿佛是隔着屏幕告诉我们他们的故事到这里就结束了，从今往后他们三个再在哪里相见，以什么样的方式相见，都不再关我的事，自北扬克顿拉开帷幕的故事到这里收场，生活还要继续；后来，因为学习，我（被强迫）收起了我的PS4，到那个时候我已经能轻车熟路的开遍圣洛都的大街小巷，我已然成为了一个老圣洛都人；可是那一晚，我打开我新买的PS4，打开我新买的《GTA V》，逛了逛海滩，坐上我的红色跑车，一路向北……那一幕幕带给我的震撼，我将永远不会忘记。因为是从那个时候起，我真正地将游戏打心底里视为一种艺术，而不是什么害人的消遣，到后来，我从网上知道原来GTA系列是描述美国梦的，我总是不由自主地和那个夜晚联系在一起——繁华的，易碎的，暧昧的，不可告人的……大概就是这样的吧。</p><p>我写了这么长的铺垫，其实是想告诉你，为什么我会对这部电影感触如此之深：不仅仅是因为我再次看到了那些似曾相识的场景，美丽的难以忘怀；而且我还看到了另一个故事，有关美国梦的故事，美好的令人心碎。一如这部电影的画面，我明知现实生活中不可能发生这样的故事，却根本不愿意去质疑。就让我带着迷蒙的的眼神，盯着那只葡萄酒杯；就让我微醺的脸色，更浓一分吧。</p><p>就当我做了一个梦，而我选择再不复醒。</p><p>还没写完先放放。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;City-of-stars-are-you-shining-for-me&quot;&gt;&lt;a href=&quot;#City-of-stars-are-you-shining-for-me&quot; class=&quot;headerlink&quot; title=&quot;City of stars, are you shining for me?&quot;&gt;&lt;/a&gt;City of stars, are you shining for me?&lt;/h1&gt;&lt;img src=&quot;/post/undefined/1.jpg&quot;&gt;
    
    </summary>
    
      <category term="Film Comment" scheme="http://yoursite.com/categories/Film-Comment/"/>
    
    
  </entry>
  
</feed>
